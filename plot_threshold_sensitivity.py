### Author: Edward Huang

import matplotlib
import numpy as np
import os
import subprocess
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import pylab

### This script tunes different values of sim_thresh in build_patient_feature_
### matrix.py

p_value_range = np.arange(0.01, 0.5, 0.01)

def generate_folder():
    global out_folder
    out_folder = './results/p_value_plots'
    if not os.path.exists(out_folder):
        os.makedirs(out_folder)

def run_clustering_scripts():
    '''
    Run the two scripts relevant to clustering.
    '''
    command = 'python build_patient_feature_matrix.py'
    subprocess.call(command, shell=True)
    print command
    for sim_thresh in p_value_range:
        command = 'python build_patient_feature_matrix.py 50 %g' % sim_thresh
        subprocess.call(command, shell=True)
        print command
        command = 'python subcategorize_patients.py full 50 > %s/%g.txt' % (
            out_folder, sim_thresh)
        subprocess.call(command, shell=True)

def read_clustering_output():
    point_list, no_prosnet = [], 0
    for sim_thresh in p_value_range:
        f = open('%s/%g.txt' % (out_folder, sim_thresh))
        f.readline() # Skip the filename.
        p_val = float(f.readline().split()[1])
        point_list += [(sim_thresh, p_val)]
        # Read the second line if it's the first time doing so.
        if no_prosnet == 0:
            f.readline() # Skip the filename.
            no_prosnet = float(f.readline().split()[1])
        f.close()
    return point_list, no_prosnet

def plot_point_list(point_list, no_prosnet):
    '''
    Given the point list, plot the points. no_prosnet is the p-value for
    survival curves generated without ProSNet.
    '''
    plt.title('Survival plot p-value vs. cosine similarity lower bound')
    plt.xlabel('Cosine Similarity Lower Bound')
    plt.ylabel('p-value of Survival Plot')
    plt.plot(*zip(*point_list))
    # TODO: This is the best p-value of the survival curve generated by the
    # results without ProSNet.
    plt.axhline(no_prosnet, color='r')
    plt.ylim(0, 0.03)
    plt.xlim(0, 0.5)
    plt.show()

    pylab.savefig('%s/p_val_plot.png' % out_folder)
    plt.close()

def main():
    generate_folder()
    # run_clustering_scripts()
    point_list, no_prosnet = read_clustering_output()
    plot_point_list(point_list, no_prosnet)

if __name__ == '__main__':
    main()